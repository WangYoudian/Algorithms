1.HashSet和HashMap的区别
https://www.geeksforgeeks.org/difference-between-hashmap-and-hashset/

在Java中的如上所述。而在Python中，HashSet即set()，HashMap（或者叫HashTable）对应了dict()。

2.基于上面的转换关系，以及类C语言链表相当于Python中的列表。推断出Python实现方式中，使用链地址法解决冲突的HashTable结构为：[[],[],[]]

（参考：解决哈希冲突的四个方法：https://www.cnblogs.com/wuchaodzxx/p/7396599.html）
（1）开放地址法；（2）再哈希法；（3）链地址法；（4）建立公共溢出区。
解释一下文章中的几个名词：
桶链结构：（参考哈希表的Java实现：https://www.geeksforgeeks.org/implementing-our-own-hash-table-with-separate-chaining-in-java/）即bucket相关的参数。哈希表的初始大小一定，当哈希value冲突时，放入对应桶的最后一个节点后方。（注意，上面Java实现并没有做冲突解决）此时哈希表的插入、删除、查找方法应做统一改写。

3.哈希表的难点总结
（1）哈希函数
性能良好的哈希函数，可以减少冲突，但一般不能完全避免冲突。
（2）解决哈希值冲突问题
一般而言，常用的有三种。即2问题中的（1）（2）（3）

4.综合所搜集到的资料来看，Java在Collections中的HashMap和C++中的STL实现方式有所不同（Collections和STL都是实现了常用数据结构的库），参考：https://www.geeksforgeeks.org/hash-table-vs-stl-map/。
根据文中列出的不同点，对于数据量大的，使用HashTable较好。反之使用STL的Map。
而对于Python而言，封装的字典类型与HashMap地位相等（但功能和操作不等），但字典中不允许重复键值。因此考虑用构造一个新的结构和方法：
例如：[[],[],...[]]，key相当于外层列表的index，关键词在内层列表中存储；再例如：{key1:[value1,value2],key1:[value1,value2]...}

当然，上述两种结构，均是在哈希函数无法解决哈希值相同问题（哈希表大小既定）要考虑的问题。

考虑在Python中（或许在Java和其他语言中也有）内置的'hash'函数可以解决哈希值冲突问题。对于解决小数据量问题，一种折中方式可能是，使用hash(关键词)作为哈希值，而初始化hashtable大小时设置为数据总量。这样就保证了不会冲突。
（但是这样设计，反而违背了Python之禅中“唯一也是最好实现”的设计理念，显然可以用默认的字典解决。）

5.讨论完哈希表的问题，下面还是使用Python来实现一个具有插入、删除、查找操作的哈希表（参考：http://blog.chapagain.com.np/hash-table-implementation-in-python-data-structures-algorithms/）

